name: CI Matrix - Unity Tests

on:
  push:
    branches: [ main, feature/gh-3-ci-matrix-unity-versions ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test ${{ matrix.unityVersion }} on ${{ matrix.os }}
    runs-on: [self-hosted, '${{ matrix.os }}']

    strategy:
      fail-fast: false
      matrix:
        os: [Windows, Linux, macOS]
        unityVersion:
          - 2022.3.50f1  # 2022.3 LTS
          - 2023.2.20f1  # 2023 LTS
          - 6000.0.26f1  # 6000.2 LTS (Unity 6)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Find Unity Editor Path
        id: unity-path
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "Windows" ]]; then
            UNITY_PATH="C:/Program Files/Unity/Hub/Editor/${{ matrix.unityVersion }}/Editor/Unity.exe"
          elif [[ "${{ matrix.os }}" == "macOS" ]]; then
            UNITY_PATH="/Applications/Unity/Hub/Editor/${{ matrix.unityVersion }}/Unity.app/Contents/MacOS/Unity"
          else
            # Linux (Steam Deck) - try common paths
            if [ -d "$HOME/Unity/Hub/Editor/${{ matrix.unityVersion }}" ]; then
              UNITY_PATH="$HOME/Unity/Hub/Editor/${{ matrix.unityVersion }}/Editor/Unity"
            elif [ -d "/opt/Unity/Hub/Editor/${{ matrix.unityVersion }}" ]; then
              UNITY_PATH="/opt/Unity/Hub/Editor/${{ matrix.unityVersion }}/Editor/Unity"
            else
              echo "::error::Unity installation not found for version ${{ matrix.unityVersion }}"
              exit 1
            fi
          fi

          # Verify Unity executable exists
          if [ ! -f "$UNITY_PATH" ]; then
            echo "::error::Unity executable not found at $UNITY_PATH"
            exit 1
          fi

          echo "unity_path=$UNITY_PATH" >> $GITHUB_OUTPUT
          echo "Found Unity at: $UNITY_PATH"

      - name: Create test directories
        shell: bash
        run: |
          mkdir -p "${{ github.workspace }}/TestResults"
          mkdir -p "${{ github.workspace }}/CodeCoverage"

      - name: Run EditMode tests
        id: editmode-tests
        shell: bash
        run: |
          "${{ steps.unity-path.outputs.unity_path }}" \
            -runTests \
            -batchmode \
            -nographics \
            -projectPath "${{ github.workspace }}" \
            -testPlatform EditMode \
            -testResults "${{ github.workspace }}/TestResults/EditMode-results.xml" \
            -logFile "${{ github.workspace }}/TestResults/EditMode-log.txt" \
            -enableCodeCoverage \
            -coverageResultsPath "${{ github.workspace }}/CodeCoverage" \
            -coverageOptions "generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+IrsikSoftware.LogSmith"

          echo "results_path=${{ github.workspace }}/TestResults" >> $GITHUB_OUTPUT
          echo "coverage_path=${{ github.workspace }}/CodeCoverage" >> $GITHUB_OUTPUT

      - name: Run PlayMode tests
        id: playmode-tests
        shell: bash
        run: |
          "${{ steps.unity-path.outputs.unity_path }}" \
            -runTests \
            -batchmode \
            -nographics \
            -projectPath "${{ github.workspace }}" \
            -testPlatform PlayMode \
            -testResults "${{ github.workspace }}/TestResults/PlayMode-results.xml" \
            -logFile "${{ github.workspace }}/TestResults/PlayMode-log.txt"

          echo "results_path=${{ github.workspace }}/TestResults" >> $GITHUB_OUTPUT

      - name: Upload EditMode test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results-EditMode-${{ matrix.unityVersion }}-${{ matrix.os }}
          path: ${{ github.workspace }}/TestResults/EditMode-*
          retention-days: 30
          if-no-files-found: warn

      - name: Upload PlayMode test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results-PlayMode-${{ matrix.unityVersion }}-${{ matrix.os }}
          path: ${{ github.workspace }}/TestResults/PlayMode-*
          retention-days: 30
          if-no-files-found: warn

      - name: Upload coverage results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage-Results-${{ matrix.unityVersion }}-${{ matrix.os }}
          path: ${{ github.workspace }}/CodeCoverage
          retention-days: 30
          if-no-files-found: warn

      - name: Check coverage threshold
        if: matrix.os == 'Linux' && matrix.unityVersion == '6000.0.26f1'
        shell: bash
        run: |
          # Find coverage summary file (Unity's coverage output structure can vary)
          COVERAGE_SUMMARY=""
          if [ -f "${{ github.workspace }}/CodeCoverage/Report/Summary.xml" ]; then
            COVERAGE_SUMMARY="${{ github.workspace }}/CodeCoverage/Report/Summary.xml"
          elif [ -f "${{ github.workspace }}/CodeCoverage/Summary.xml" ]; then
            COVERAGE_SUMMARY="${{ github.workspace }}/CodeCoverage/Summary.xml"
          else
            echo "::error::Coverage summary file not found. Checked:"
            echo "  - ${{ github.workspace }}/CodeCoverage/Report/Summary.xml"
            echo "  - ${{ github.workspace }}/CodeCoverage/Summary.xml"
            ls -la "${{ github.workspace }}/CodeCoverage" || echo "CodeCoverage directory is empty or missing"
            exit 1
          fi

          echo "Found coverage summary at: $COVERAGE_SUMMARY"

          # Extract line coverage percentage from Summary.xml
          LINE_COVERAGE=$(grep -oP 'linecoverage="\K[0-9.]+' "$COVERAGE_SUMMARY" || echo "0")

          echo "::notice::Line Coverage: ${LINE_COVERAGE}%"

          # Compare coverage (using bc for float comparison)
          if command -v bc &> /dev/null; then
            if (( $(echo "$LINE_COVERAGE < 100" | bc -l) )); then
              echo "::error::Coverage is ${LINE_COVERAGE}%, which is below the required 100%"
              exit 1
            fi
          else
            # Fallback if bc is not available (use awk)
            if awk -v cov="$LINE_COVERAGE" 'BEGIN {exit !(cov < 100)}'; then
              echo "::error::Coverage is ${LINE_COVERAGE}%, which is below the required 100%"
              exit 1
            fi
          fi

          echo "::notice::âœ… Coverage check passed: ${LINE_COVERAGE}%"

      - name: Publish coverage report
        if: matrix.os == 'Linux' && matrix.unityVersion == '6000.0.26f1'
        uses: actions/upload-artifact@v4
        with:
          name: Coverage-Report-HTML
          path: ${{ github.workspace }}/CodeCoverage
          retention-days: 90
          if-no-files-found: warn

      - name: Clean up test artifacts
        if: always()
        shell: bash
        run: |
          rm -rf "${{ github.workspace }}/TestResults"
          rm -rf "${{ github.workspace }}/CodeCoverage"

  coverage-summary:
    name: Coverage Gate
    runs-on: [self-hosted, Linux]
    needs: test
    if: always()

    steps:
      - name: Check if all tests passed
        if: needs.test.result != 'success'
        run: |
          echo "::error::One or more test jobs failed. Coverage gate cannot pass."
          exit 1

      - name: Coverage gate passed
        run: |
          echo "::notice::All tests passed and coverage requirements met!"